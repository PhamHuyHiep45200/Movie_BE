datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum CategoryType {
  Phim_2D
  Phim_3D
}

model User {
  id        Int         @id @default(autoincrement())
  nameUser  String
  phone     String
  email     String
  password  String
  deleteFlg Boolean
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  BookMovie BookMovie[]
}

model Movie {
  id             Int              @id @default(autoincrement())
  nameMovie      String
  description    String
  author         String
  timeMovie      Int
  thumbnail      String[]
  deleteFlg      Boolean
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  categoryId     Int
  movieCategory  Category         @relation(fields: [categoryId], references: [id])
  ShowtimesMovie ShowtimesMovie[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  deleteFlg Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Movie     Movie[]
}

model ShowtimesMovie {
  id        Int      @id @default(autoincrement())
  idRoom    Int
  idMovie   Int
  timeStart DateTime
  timeEnd   DateTime
  price     Int
  deleteFlg Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  movieShowtime Movie       @relation(fields: [idMovie], references: [id])
  roomShowtime  Room        @relation(fields: [idRoom], references: [id])
  BookMovie     BookMovie[]
}

model Room {
  id             Int              @id @default(autoincrement())
  name           String
  numberChair    Int
  deleteFlg      Boolean
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  ShowtimesMovie ShowtimesMovie[]
}

model BookMovie {
  id               Int               @id @default(autoincrement())
  status           Boolean
  userId           Int
  couponId         Int
  showtimesMovieId Int
  deleteFlg        Boolean
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  showtimeBook     ShowtimesMovie    @relation(fields: [showtimesMovieId], references: [id])
  userBook         User              @relation(fields: [userId], references: [id])
  couponBook       Coupon            @relation(fields: [couponId], references: [id])
  BookMovieDetail  BookMovieDetail[]
}

model BookMovieDetail {
  id              Int       @id @default(autoincrement())
  orderId         Int
  price           Int
  chairs          Int[]
  deleteFlg       Boolean
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  detailBookMovie BookMovie @relation(fields: [orderId], references: [id])
}

model Coupon {
  id        Int         @id @default(autoincrement())
  name      String
  timeStart DateTime
  timeEnd   DateTime
  code      String
  discount  Int
  deleteFlg Boolean
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  BookMovie BookMovie[]
}

model Slide {
  id        Int      @id @default(autoincrement())
  link      String
  image     String
  deleteFlg Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
